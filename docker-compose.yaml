# secrets file needed to run the containers; use 'docker compose --env-file <path-to-secret-env-file> up -d' to run
name: bit_server

networks:
  default_net:
    name: "default_net"
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.0.0/24
          ip_range: 10.0.0.0/24 # 10.0.0.1 <-> 10.0.0.254
          gateway: 10.0.0.1

services:
  
  homeassistant:
    container_name: homeassistant
    image: ghcr.io/home-assistant/home-assistant:stable
    environment:
      TZ: $TIMEZONE
    network_mode: host
    volumes:
      - $BASE_FOLDER/homeassistant/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
      - $LOG_FOLDER/home-assistant.log:/config/home-assistant.log
    restart: unless-stopped
    privileged: true
  # https://www.home-assistant.io/installation/alternative#docker-compose

  deconz:
    container_name: deconz
    image: deconzcommunity/deconz
    volumes:
      - $BASE_FOLDER/deconz:/opt/deCONZ
    devices:
      - /dev/ttyACM0
    environment:
      TZ: $TIMEZONE
      DECONZ_WEB_PORT: $DECONZ_WEB_PORT
      DECONZ_VNC_MODE: "1"
      DECONZ_VNC_PORT: $DECONZ_VNC_PORT
      DECONZ_VNC_PASSWORD: $DECONZ_VNC_PWD
    network_mode: host
    restart: unless-stopped
    privileged: true
  # https://github.com/deconz-community/deconz-docker

  caddy:
    container_name: caddy
    # image: caddy:latest
    build:
      context: .
      dockerfile_inline: |
        FROM caddy:builder AS builder

        RUN xcaddy build \
          --with github.com/caddy-dns/duckdns

        FROM caddy:latest

        COPY --from=builder /usr/bin/caddy /usr/bin/caddy
    environment:
      TZ: $TIMEZONE
      HOST_ADDRESS: $HOST_ADDRESS
      DUCK_DNS_TOKEN: $DUCK_DNS_TOKEN
      LOG_FILE: "/log/caddy.log"
      HASSIO_EXT_URL: $HASSIO_EXT_URL
      HASSIO_EXT_PORT: $HASSIO_EXT_PORT
      HASSIO_INT_PORT: $HASSIO_INT_PORT
      VAULT_EXT_URL: $VAULT_EXT_URL
      VAULT_EXT_PORT: $VAULT_EXT_PORT
      VAULT_INT_PORT: $VAULT_INT_PORT
    networks:
      - default_net
    ports:
      - "$HASSIO_EXT_PORT:$HASSIO_EXT_PORT"
      - "$VAULT_EXT_PORT:$VAULT_EXT_PORT"
      - "80:80"
    volumes:
      - "$BASE_FOLDER/caddy/Caddyfile:/etc/caddy/Caddyfile"
      - "$BASE_FOLDER/caddy/data:/data"
      - "$BASE_FOLDER/caddy/config:/config"
      - "$LOG_FOLDER/caddy.log:/log/caddy.log"
    restart: unless-stopped
  # https://hub.docker.com/_/caddy
    

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    environment:
      TZ: $TIMEZONE
      WEBPASSWORD: $PIHOLE_PWD #'set a secure password here or it will be random'
      WEB_PORT: $PIHOLE_WEB_PORT
      FTLCONF_REPLY_ADDR4: $HOST_ADDRESS
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    networks:
      - default_net
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      # - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      - "$PIHOLE_WEB_PORT:$PIHOLE_WEB_PORT/tcp"
    volumes:
      - "$BASE_FOLDER/pihole/etc-pihole:/etc/pihole"
      - "$BASE_FOLDER/pihole/etc-dnsmasq.d:/etc/dnsmasq.d"
      - type: bind
        source: $BASE_FOLDER/pihole/lighttpd/external.conf
        target: /etc/lighttpd/external.conf
      - "$BASE_FOLDER/pihole/backups:/backups"
      - $LOG_FOLDER/pihole.log:/var/log/pihole/pihole.log
    # cap_add:
    # - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: unless-stopped
  # https://github.com/pi-hole/docker-pi-hole

  unbound:
    build:
      args:
        UNBOUND_VERSION: latest
        LDNS_VERSION: 1.8.3
        XX_VERSION: latest
        ALPINE_VERSION: latest
      dockerfile_inline: |

        ARG UNBOUND_VERSION
        ARG LDNS_VERSION
        ARG XX_VERSION
        ARG ALPINE_VERSION

        FROM --platform=$${BUILDPLATFORM} tonistiigi/xx:$${XX_VERSION} AS xx

        FROM --platform=$${BUILDPLATFORM} alpine:$${ALPINE_VERSION} AS base
        COPY --from=xx / /
        RUN apk --update --no-cache add binutils clang curl file make pkgconf tar tree xz

        FROM base AS base-build
        ENV XX_CC_PREFER_LINKER=ld
        ARG TARGETPLATFORM
        RUN xx-apk --no-cache add gcc g++ expat-dev hiredis hiredis-dev libevent-dev libcap libpcap-dev openssl-dev perl
        RUN xx-clang --setup-target-triple

        FROM base AS unbound-src
        WORKDIR /src/unbound
        ARG UNBOUND_VERSION
        RUN curl -sSL "https://unbound.net/downloads/unbound-$${UNBOUND_VERSION}.tar.gz" | tar xz --strip 1

        FROM base AS ldns-src
        WORKDIR /src/ldns
        ARG LDNS_VERSION
        RUN curl -sSL "https://nlnetlabs.nl/downloads/ldns/ldns-$${LDNS_VERSION}.tar.gz" | tar xz --strip 1

        FROM base-build AS unbound-build
        WORKDIR /src/unbound
        RUN --mount=type=bind,from=unbound-src,source=/src/unbound,target=.,rw <<EOT
          set -ex
          CC=xx-clang CXX=xx-clang++ ./configure \
            --host=$(xx-clang --print-target-triple) \
            --prefix=/usr \
            --sysconfdir=/etc \
            --mandir=/usr/share/man \
            --localstatedir=/var \
            --with-chroot-dir="" \
            --with-pidfile=/var/run/unbound/unbound.pid \
            --with-run-dir=/var/run/unbound \
            --with-username="" \
            --disable-flto \
            --disable-rpath \
            --disable-shared \
            --enable-cachedb \
            --enable-event-api \
            --with-pthreads \
            --with-libhiredis=$(xx-info sysroot)usr \
            --with-libexpat=$(xx-info sysroot)usr \
            --with-libevent=$(xx-info sysroot)usr \
            --with-ssl=$(xx-info sysroot)usr
          make DESTDIR=/out install
          make DESTDIR=/out unbound-event-install
          install -Dm755 contrib/update-anchor.sh /out/usr/share/unbound/update-anchor.sh
          tree /out
          xx-verify /out/usr/sbin/unbound
          xx-verify /out/usr/sbin/unbound-anchor
          xx-verify /out/usr/sbin/unbound-checkconf
          xx-verify /out/usr/sbin/unbound-control
          xx-verify /out/usr/sbin/unbound-host
          file /out/usr/sbin/unbound
          file /out/usr/sbin/unbound-anchor
          file /out/usr/sbin/unbound-checkconf
          file /out/usr/sbin/unbound-control
          file /out/usr/sbin/unbound-host
        EOT

        FROM base-build AS ldns-build
        WORKDIR /src/ldns
        RUN --mount=type=bind,from=ldns-src,source=/src/ldns,target=.,rw <<EOT
          set -ex
          CC=xx-clang CXX=xx-clang++ CPPFLAGS=-I/src/ldns/ldns ./configure \
            --host=$(xx-clang --print-target-triple) \
            --prefix=/usr \
            --sysconfdir=/etc \
            --mandir=/usr/share/man \
            --infodir=/usr/share/info \
            --localstatedir=/var \
            --disable-gost \
            --disable-rpath \
            --disable-shared \
            --with-drill \
            --with-ssl=$(xx-info sysroot)usr \
            --with-trust-anchor=/var/run/unbound/root.key
          make DESTDIR=/out install
          tree /out
          xx-verify /out/usr/bin/drill
          file /out/usr/bin/drill
        EOT

        FROM alpine:$${ALPINE_VERSION}
        COPY --from=unbound-build /out /
        COPY --from=ldns-build /out /

        RUN apk --update --no-cache add \
            ca-certificates \
            dns-root-hints \
            dnssec-root \
            expat \
            hiredis \
            libevent \
            libpcap \
            openssl \
            shadow \
          && mkdir -p /run/unbound \
          && mkdir -p /etc/unbound \
          && mkdir -p /config \
          && unbound -V \
          && unbound-anchor -v || true \
          && ldns-config --version \
          && addgroup -g 1500 unbound \
          && adduser -D -H -u 1500 -G unbound -s /bin/sh unbound \
          && chown -R unbound. /etc/unbound /run/unbound /config \
          && rm -rf /tmp/* /var/www/*

        COPY <<-"EOF" /etc/unbound/unbound.conf
          include: "/config/*.conf"
        EOF

        USER unbound

        EXPOSE 53/tcp
        EXPOSE 53/udp

        COPY <<-"EOF" /entrypoint.sh
          #!/bin/sh
          set -e
          unbound-checkconf -q /etc/unbound/unbound.conf
          unbound-anchor -v
          exec unbound -d -c /etc/unbound/unbound.conf
        EOF
    healthcheck:
      test: ["CMD", "drill", "@127.0.0.1" , "cloudflare.com" ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 0s
      start_interval: 5s
    entrypoint:
      - "sh"
      - "/entrypoint.sh"
    container_name: unbound
    networks:
      default_net:
        ipv4_address: 10.0.0.10
    ports:
      - "$UNBOUND_PORT:53/tcp"
      - "$UNBOUND_PORT:53/udp"
    volumes:
      - "$BASE_FOLDER/unbound/config/:/config:ro"
      - "$LOG_FOLDER/unbound.log:/etc/unbound/unbound.log"
    restart: always

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    networks:
      - default_net
    ports:
      - "$VAULT_INT_PORT:80"
    environment:
      DOMAIN: "https://$VAULT_EXT_URL:$VAULT_EXT_PORT/"  # Your domain; vaultwarden needs to know it's https to work properly with attachments
      SIGNUPS_ALLOWED: false
      INVITATIONS_ALLOWED: true
      ADMIN_TOKEN: $VAULT_ADMIN_TOKEN
      PUSH_ENABLED: true
      PUSH_INSTALLATION_ID: $VAULT_HOST_INSTALLATION_ID
      PUSH_INSTALLATION_KEY: $VAULT_HOST_INSTALLATION_KEY
      PUSH_RELAY_URI: "https://push.bitwarden.eu"
      PUSH_IDENTITY_URI: "https://identity.bitwarden.eu"
      ROCKET_LIMITS: "{json=10485760}"
      ROCKET_WORKERS: 10
      SHOW_PASSWORD_HINT: true
      LOG_FILE: "/log/vaultwarden.log"
      LOG_LEVEL: "info"
      EXTENDED_LOGGING: true
      SMTP_HOST: "smtp.gmail.com"
      SMTP_FROM: "vaultwarden@gmail.com"
      SMTP_PORT: "465"
      SMTP_SECURITY: "force_tls"
      SMTP_USERNAME: $VAULT_SMTP_EMAIL
      SMTP_PASSWORD: $VAULT_SMTP_PSW
    volumes:
      - "$BASE_FOLDER/vaultwarden/data:/data"
      - "$LOG_FOLDER/vaultwarden.log:/log/vaultwarden.log"
  # https://github.com/dani-garcia/vaultwarden/wiki/Using-Docker-Compose